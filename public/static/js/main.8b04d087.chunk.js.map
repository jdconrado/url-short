{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetch","require","App","props","onSubmit","bind","onChange","state","form","slug","value","url","result","event","name","target","this","setState","preventDefault","bod","JSON","stringify","console","log","method","mode","body","headers","response","json","className","style","padding","htmlFor","type","id","textAlign","margin","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,kLCIrCC,G,YAAQC,EAAQ,KA0EPC,E,kDAxEb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,MAAQ,CACXC,KAAK,CACHC,KAAO,CAACC,MAAO,IACfC,IAAM,CAACD,MAAM,KAEfE,OAAQ,IATM,E,qDAaTC,GACP,IAAIC,EAAOD,EAAME,OAAOD,KACpBJ,EAAQG,EAAME,OAAOL,MACzBM,KAAKC,SAAS,CACZT,KAAK,2BACEQ,KAAKT,MAAMC,MADd,kBAECM,EAFD,2BAGGE,KAAKT,MAAMC,KAAKM,IAHnB,IAIAJ,gB,wEAMOG,G,gFACbA,EAAMK,iBACFC,EAAMC,KAAKC,UAAU,CACvBZ,KAAOO,KAAKT,MAAMC,KAAKC,KAAKC,MAC5BC,IAAMK,KAAKT,MAAMC,KAAKG,IAAID,QAE5BY,QAAQC,IAAIJ,G,SACSnB,EAAM,oCAAqC,CAC9DwB,OAAQ,OACRC,KAAM,OACNC,KAAMP,EACNQ,QACI,CAAC,eAAgB,sB,cALnBC,E,YAOJZ,K,KAAuBI,K,UAAqBQ,EAASC,O,8BAAzBR,U,sBAAbT,O,WAAVK,S,uJAIL,IAAIL,EAASI,KAAKT,MAAMK,OACxB,OACE,yBAAKkB,UAAU,YAAYC,MAAO,CAACC,QAAQ,OACzC,0CAAe,0BAAMF,UAAU,uBAAhB,aACf,0BAAM1B,SAAUY,KAAKZ,UACnB,yBAAK0B,UAAU,cACb,2BAAOG,QAAQ,QAAf,SACA,2BAAO3B,SAAUU,KAAKV,SAAU4B,KAAK,OAAOJ,UAAU,eAAeK,GAAG,OAAOrB,KAAK,SACpF,2BAAOqB,GAAG,WAAWL,UAAU,wBAA/B,yCAEF,yBAAKA,UAAU,cACb,2BAAOG,QAAQ,OAAf,QACA,2BAAO3B,SAAUU,KAAKV,SAAU4B,KAAK,MAAMJ,UAAU,eAAeK,GAAG,MAAMrB,KAAK,SAEpF,4BAAQoB,KAAK,SAASJ,UAAU,oCAAhC,YAGF,yBAAKA,UAAU,YAAYC,MAAO,CAACK,UAAU,SAAUC,OAAO,SAC3DzB,Q,GAhEO0B,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.8b04d087.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst fetch = require('node-fetch');\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.state = {\n      form:{\n        slug : {value: ''},\n        url : {value:''}\n      },\n      result: \"\"\n    }\n  }\n  \n  onChange(event){\n    let name = event.target.name;\n    let value = event.target.value; \n    this.setState({\n      form: {\n          ...this.state.form,\n          [name]: {\n          ...this.state.form[name],\n          value\n          }\n      }\n    });\n  }\n\n  async onSubmit(event){\n    event.preventDefault();\n    let bod = JSON.stringify({\n      slug : this.state.form.slug.value,\n      url : this.state.form.url.value\n    });\n    console.log(bod);\n    let response = await fetch(\"http://url-smoi.herokuapp.com/new\", {\n      method: 'POST',\n      mode: 'cors',            \n      body: bod,\n      headers: \n          {'Content-Type': 'application/json'},\n    });\n    this.setState({result: JSON.stringify(await response.json())});\n  }\n\n  render(){\n    let result = this.state.result;\n    return(\n      <div className=\"container\" style={{padding:\"5%\"}}>\n        <h1>Bienvenido <span className=\"badge badge-success\">URL Smoi</span></h1>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"slug\"> Slug</label>\n            <input onChange={this.onChange} type=\"text\" className=\"form-control\" id=\"slug\" name=\"slug\" />\n            <small id=\"slugtext\" className=\"form-text text-muted\">Así es como encontrarás tu URL</small>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"url\"> URL</label>\n            <input onChange={this.onChange} type=\"url\" className=\"form-control\" id=\"url\" name=\"url\" />\n          </div>\n          <button type=\"submit\" className=\"btn btn-success btn-lg btn-block\"> Crear </button>\n        </form>\n\n        <div className=\"container\" style={{textAlign:\"center\", margin:\"auto\"}}>\n          {result}\n        </div>\n      </div>\n\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}